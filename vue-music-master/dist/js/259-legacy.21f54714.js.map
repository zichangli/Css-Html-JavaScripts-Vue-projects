{"version":3,"file":"js/259-legacy.21f54714.js","mappings":"oKAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,oBAAoB,CAACF,EAAG,MAAM,CAACE,YAAY,cAAc,CAACF,EAAG,KAAK,CAACE,YAAY,SAAS,CAACN,EAAIO,GAAGP,EAAIQ,GAAGR,EAAIS,OAAOC,MAAMC,MAAMP,EAAG,OAAO,CAACE,YAAY,aAAa,CAACN,EAAIO,GAAG,MAAMP,EAAIQ,GAAGR,EAAIY,OAAO,YAAYR,EAAG,UAAU,CAACS,MAAM,CAACC,MAAOd,EAAe,YAAEe,SAAS,SAAUC,GAAMhB,EAAIiB,YAAYD,GAAKE,WAAW,gBAAgB,CAACd,EAAG,cAAc,CAACe,MAAM,CAAC,MAAQ,KAAK,KAAO,UAAU,CAACf,EAAG,WAAW,CAACgB,YAAY,CAAC,MAAQ,QAAQD,MAAM,CAAC,KAAOnB,EAAIqB,SAAS,OAAS,KAAK,CAACjB,EAAG,kBAAkB,CAACe,MAAM,CAAC,MAAQ,KAAK,KAAO,QAAQ,MAAQ,QAAQf,EAAG,kBAAkB,CAACe,MAAM,CAAC,KAAO,OAAO,MAAQ,KAAK,MAAQ,MAAMf,EAAG,kBAAkB,CAACe,MAAM,CAAC,KAAO,kBAAkB,MAAQ,KAAK,MAAQ,MAAMf,EAAG,kBAAkB,CAACe,MAAM,CAAC,KAAO,aAAa,MAAQ,KAAK,MAAQ,SAASf,EAAG,kBAAkB,CAACe,MAAM,CAAC,KAAO,WAAW,MAAQ,KAAK,MAAQ,SAASf,EAAG,kBAAkB,CAACe,MAAM,CAAC,KAAO,GAAG,MAAQ,MAAMG,YAAYtB,EAAIuB,GAAG,CAAC,CAACC,IAAI,UAAUC,GAAG,SAASC,GAAO,MAAO,CAAE1B,EAAI2B,OAASD,EAAME,IAAIC,GAAIzB,EAAG,IAAI,CAACE,YAAY,qBAAqBc,YAAY,CAAC,YAAY,QAAQU,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAO/B,EAAIgC,UAAUN,EAAME,IAAIC,GAAIH,EAAME,IAAIK,UAAU7B,EAAG,IAAI,CAACE,YAAY,sBAAsBc,YAAY,CAAC,YAAY,QAAQU,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAO/B,EAAIkC,iBAAiB9B,EAAG,IAAI,CAACE,YAAY,mBAAmBc,YAAY,CAAC,YAAY,QAAQU,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAO/B,EAAImC,UAAUT,EAAME,IAAIC,QAAQzB,EAAG,IAAI,CAACE,YAAY,8BAA8Bc,YAAY,CAAC,YAAY,QAAQU,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAO/B,EAAIoC,UAAUV,EAAME,IAAIC,gBAAgB,GAAGzB,EAAG,gBAAgB,CAACe,MAAM,CAAC,WAAa,GAAG,OAAS,oBAAoB,MAAQnB,EAAIY,MAAM,eAAeZ,EAAIqC,MAAMP,GAAG,CAAC,iBAAiB9B,EAAIsC,6BAA6B,GAAGlC,EAAG,cAAc,CAACe,MAAM,CAAC,MAAQ,KAAK,KAAO,UAAU,CAACf,EAAG,MAAM,CAACE,YAAY,SAASN,EAAIuC,GAAIvC,EAAa,WAAE,SAASwC,EAAKC,GAAO,OAAOrC,EAAG,MAAM,CAACoB,IAAIiB,EAAMnC,YAAY,OAAOwB,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAO/B,EAAI0C,kBAAkBF,EAAKX,OAAO,CAACzB,EAAG,MAAM,CAACE,YAAY,YAAY,CAACF,EAAG,MAAM,CAACE,YAAY,YAAY,CAACN,EAAIO,GAAG,UAAUH,EAAG,OAAO,CAACE,YAAY,OAAO,CAACN,EAAIO,GAAGP,EAAIQ,GAAGgC,EAAKG,gBAAgBvC,EAAG,MAAM,CAACe,MAAM,CAAC,IAAMqB,EAAKI,YAAY,QAAU5C,EAAI6C,WAAW,IAAM,MAAMzC,EAAG,OAAO,CAACE,YAAY,sBAAsB,CAACF,EAAG,IAAI,CAACE,YAAY,2BAA2BF,EAAG,IAAI,CAACE,YAAY,QAAQ,CAACN,EAAIO,GAAGP,EAAIQ,GAAGgC,EAAKP,cAAa,GAAG7B,EAAG,gBAAgB,CAACe,MAAM,CAAC,WAAa,GAAG,OAAS,oBAAoB,MAAQnB,EAAIY,MAAM,eAAeZ,EAAI8C,eAAehB,GAAG,CAAC,iBAAiB9B,EAAI+C,iCAAiC,GAAG3C,EAAG,cAAc,CAACe,MAAM,CAAC,MAAQ,KAAK,KAAO,OAAO,CAACf,EAAG,MAAM,CAACE,YAAY,YAAYN,EAAIuC,GAAIvC,EAAM,IAAE,SAASwC,EAAKC,GAAO,OAAOrC,EAAG,MAAM,CAACoB,IAAIiB,EAAMnC,YAAY,OAAOwB,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAO/B,EAAIgD,YAAYR,EAAKX,OAAO,CAACzB,EAAG,MAAM,CAACE,YAAY,YAAY,CAACF,EAAG,MAAM,CAACe,MAAM,CAAC,IAAMqB,EAAKS,MAAM,IAAM,MAAM7C,EAAG,OAAO,CAACE,YAAY,sBAAsB,CAACF,EAAG,IAAI,CAACE,YAAY,yBAAyBF,EAAG,MAAM,CAACE,YAAY,YAAY,CAACF,EAAG,MAAM,CAACE,YAAY,OAAO,CAACN,EAAIO,GAAGP,EAAIQ,GAAGgC,EAAKG,gBAAgBvC,EAAG,OAAO,CAACE,YAAY,QAAQ,CAACN,EAAIO,GAAGP,EAAIQ,GAAGgC,EAAKU,eAAe9C,EAAG,MAAM,CAACE,YAAY,aAAa,CAACF,EAAG,MAAM,CAACE,YAAY,QAAQ,CAACN,EAAIO,GAAGP,EAAIQ,GAAGgC,EAAKP,SAAS7B,EAAG,MAAM,CAACE,YAAY,UAAU,CAACN,EAAIO,GAAGP,EAAIQ,GAAGgC,EAAKW,sBAAqB,GAAG/C,EAAG,gBAAgB,CAACe,MAAM,CAAC,WAAa,GAAG,OAAS,oBAAoB,MAAQnB,EAAIY,MAAM,eAAeZ,EAAIoD,QAAQtB,GAAG,CAAC,iBAAiB9B,EAAIqD,+BAA+B,IAAI,IAAI,IAC7hHC,EAAkB,G,UC0ItB,G,QAAA,CACEC,KADF,WAEI,MAAO,CAEL,WAANV,aAAAA,EAAAA,MAAAA,IAEM5B,YAAa,QAEbI,SAAU,GAEVmC,UAAW,GAEXC,GAAI,GAEJ7C,MAAO,EAEPe,OAAO,EAEPU,KAAM,EAENqB,MAAO,GAEPZ,cAAe,EAEfa,eAAgB,GAEhBP,OAAQ,EAERQ,QAAS,IAIbC,QAhCF,WAiCI5D,KAAK6D,sBAKPC,MAAO,CACL,YADJ,WACA,0KACAC,EAAA,EAEAN,EAAA,GAHA,KAKA,cALA,OAMA,UANA,OAUA,UAVA,OAcA,OAdA,+BAOAM,EAAAA,EACAN,EAAAA,GARA,mCAWAM,EAAAA,IACAN,EAAAA,GAZA,oCAeAM,EAAAA,KACAN,EAAAA,EAhBA,kFAqBA,sBACAO,OAAAA,CACAC,SAAAA,EAAAA,OAAAA,MAAAA,EACAF,KAAAA,EAEAN,MAAAA,KA1BA,oBAqBAS,EArBA,EAqBAZ,KASAY,KAAAA,EAAAA,KA9BA,0CA+BA,kCA/BA,WAgCAA,MAAAA,EAAAA,IAhCA,0CAiCA,0CAjCA,QAmCA,SAIA,IAFA,0BAEA,4BACAC,EAAAC,SAAAA,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,IACAC,EAAAD,SAAAA,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,IACA,OACAD,EAAAA,IAAAA,GAEA,OACAE,EAAAA,IAAAA,GAGA,+BAGA,gCAGA,UAOA,IALA,+BAEA,+BAGA,6BACA,+BACA,yBACAD,SAAAA,EAAAA,UAAAA,GAAAA,UAAAA,KAAAA,UAUA,IALA,kBAEA,yBAGA,sBAEAD,EAAAC,SAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IACAC,EAAAD,SAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IACA,OACAD,EAAAA,IAAAA,GAEA,OACAE,EAAAA,IAAAA,GAEA,yBAGA,wBACA,kBACAD,SAAAA,EAAAA,GAAAA,GAAAA,UAAAA,KAAAA,KA1FA,gDAiGEE,QAAS,CACP,yBADJ,SACAC,GAAA,gJAEA,SACA,uBAHA,8CAKI,6BANJ,SAMAA,GAAA,gJAEA,kBACA,2BAHA,8CAKI,2BAXJ,SAWAA,GAAA,gJAEA,WACA,yBAHA,8CAOI,YAlBJ,SAkBA3C,GAAA,gKACA,4CADA,8CAII,kBAtBJ,SAsBAA,GAAA,gKAEA,8CAFA,8CAKI,mBA3BJ,WA2BA,8KACA,sBACAoC,OAAAA,CACAC,SAAAA,EAAAA,OAAAA,MAAAA,EACAF,KAAAA,EAEAN,MAAAA,GACAe,QAAAA,EAAAA,KAAAA,GAAAA,EAAAA,SAPA,mBACAN,EADA,EACAZ,KASAY,KAAAA,EAAAA,KAVA,yCAWA,kCAXA,UAYAA,MAAAA,EAAAA,IAZA,0CAaA,wCAbA,QAkBA,IAHA,0BAGA,4BACAC,EAAAC,SAAAA,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,IACAC,EAAAD,SAAAA,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,IACA,OACAD,EAAAA,IAAAA,GAEA,OACAE,EAAAA,IAAAA,GAEA,+BAGA,2BA9BA,+CAkCI,uBA7DJ,WA6DA,0KACA,uBACAL,OAAAA,CACAC,SAAAA,EAAAA,OAAAA,MAAAA,EACAF,KAAAA,IAEAN,MAAAA,EAAAA,eACAe,QAAAA,EAAAA,cAAAA,GAAAA,EAAAA,kBAPA,mBACAN,EADA,EACAZ,KASAY,KAAAA,EAAAA,KAVA,yCAWA,kCAXA,OAiBA,IAHA,+BAGA,6BACA,+BACA,yBACAE,SAAAA,EAAAA,UAAAA,GAAAA,UAAAA,KAAAA,KApBA,+CA0BI,qBAvFJ,WAuFA,8KACA,sBACAJ,OAAAA,CACAC,SAAAA,EAAAA,OAAAA,MAAAA,EACAF,KAAAA,KAEAN,MAAAA,EACAe,QAAAA,EAAAA,OAAAA,GAAAA,EAAAA,WAPA,mBACAN,EADA,EACAZ,KASAY,KAAAA,EAAAA,KAVA,yCAWA,kCAXA,OAmBA,IALA,kBAEA,yBAGA,sBAEAC,EAAAC,SAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IACAC,EAAAD,SAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IACA,OACAD,EAAAA,IAAAA,GAEA,OACAE,EAAAA,IAAAA,GAEA,yBAGA,wBACA,kBACAD,SAAAA,EAAAA,GAAAA,GAAAA,UAAAA,KAAAA,KAlCA,+CAwCI,UA/HJ,SA+HAxC,GAAA,+KAAAI,EAAAA,EAAAA,OAAAA,QAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAAA,KACA,UADA,SAEA,+BAFA,mBAEAkC,EAFA,EAEAZ,KACAY,MAAAA,EAAAA,KAHA,0CAIA,iBACA,iCALA,QAQAO,EAAAP,EAAAA,KAAAA,GAAAA,IAGA,sBACA,uBACA,sBAbA,+CAkBI,WAjJJ,WAiJA,uJACA,aADA,SAEA,uBAFA,8CAIIhC,UArJJ,WAsJM,OAAOlC,KAAK0E,SAASC,QAAQ,2BAE/BxC,UAxJJ,WAyJM,OAAOnC,KAAK0E,SAASC,QAAQ,8BC5akQ,I,UCOjSC,GAAY,OACd,EACA9E,EACAuD,GACA,EACA,KACA,KACA,MAIF,EAAeuB,EAAiB,S","sources":["webpack://music163_vue/./src/Views/searchMusic.vue?c4c1","webpack://music163_vue/src/Views/searchMusic.vue","webpack://music163_vue/./src/Views/searchMusic.vue?887a","webpack://music163_vue/./src/Views/searchMusic.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"result-container\"},[_c('div',{staticClass:\"title-wrap\"},[_c('h2',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.$route.query.q))]),_c('span',{staticClass:\"sub-title\"},[_vm._v(\"找到 \"+_vm._s(_vm.count)+\" 个结果\")])]),_c('el-tabs',{model:{value:(_vm.activeIndex),callback:function ($$v) {_vm.activeIndex=$$v},expression:\"activeIndex\"}},[_c('el-tab-pane',{attrs:{\"label\":\"歌曲\",\"name\":\"songs\"}},[_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.songList,\"border\":\"\"}},[_c('el-table-column',{attrs:{\"label\":\"序号\",\"type\":\"index\",\"width\":\"50\"}}),_c('el-table-column',{attrs:{\"prop\":\"name\",\"label\":\"歌名\",\"width\":\"\"}}),_c('el-table-column',{attrs:{\"prop\":\"artists[0].name\",\"label\":\"歌手\",\"width\":\"\"}}),_c('el-table-column',{attrs:{\"prop\":\"album.name\",\"label\":\"专辑\",\"width\":\"180\"}}),_c('el-table-column',{attrs:{\"prop\":\"duration\",\"label\":\"时长\",\"width\":\"120\"}}),_c('el-table-column',{attrs:{\"prop\":\"\",\"label\":\"功能\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [(_vm.isPay != scope.row.id)?_c('i',{staticClass:\"el-icon-video-play\",staticStyle:{\"font-size\":\"22px\"},on:{\"click\":function($event){return _vm.playMusic(scope.row.id, scope.row.name)}}}):_c('i',{staticClass:\"el-icon-video-pause\",staticStyle:{\"font-size\":\"22px\"},on:{\"click\":function($event){return _vm.audioPause()}}}),_c('i',{staticClass:\"el-icon-star-off\",staticStyle:{\"font-size\":\"22px\"},on:{\"click\":function($event){return _vm.LikeMusic(scope.row.id)}}}),_c('i',{staticClass:\"el-icon-circle-plus-outline\",staticStyle:{\"font-size\":\"22px\"},on:{\"click\":function($event){return _vm.MoreMusic(scope.row.id)}}})]}}])})],1),_c('el-pagination',{attrs:{\"background\":\"\",\"layout\":\"prev, pager, next\",\"total\":_vm.count,\"current-page\":_vm.page},on:{\"current-change\":_vm.handleCurrentChangeMusic}})],1),_c('el-tab-pane',{attrs:{\"label\":\"歌单\",\"name\":\"lists\"}},[_c('div',{staticClass:\"items\"},_vm._l((_vm.playlists),function(item,index){return _c('div',{key:index,staticClass:\"item\",on:{\"click\":function($event){return _vm.gotoMusicPlaylist(item.id)}}},[_c('div',{staticClass:\"img-wrap\"},[_c('div',{staticClass:\"num-wrap\"},[_vm._v(\" 播放量: \"),_c('span',{staticClass:\"num\"},[_vm._v(_vm._s(item.playCount))])]),_c('img',{attrs:{\"src\":item.coverImgUrl,\"onerror\":_vm.errorImage,\"alt\":\"\"}}),_c('span',{staticClass:\"iconfont icon-play\"},[_c('i',{staticClass:\"el-icon-video-play\"})])]),_c('p',{staticClass:\"name\"},[_vm._v(_vm._s(item.name))])])}),0),_c('el-pagination',{attrs:{\"background\":\"\",\"layout\":\"prev, pager, next\",\"total\":_vm.count,\"current-page\":_vm.MusicListpage},on:{\"current-change\":_vm.handleCurrentChangeMusicList}})],1),_c('el-tab-pane',{attrs:{\"label\":\"MV\",\"name\":\"mv\"}},[_c('div',{staticClass:\"items mv\"},_vm._l((_vm.mv),function(item,index){return _c('div',{key:index,staticClass:\"item\",on:{\"click\":function($event){return _vm.gotoMusicMv(item.id)}}},[_c('div',{staticClass:\"img-wrap\"},[_c('img',{attrs:{\"src\":item.cover,\"alt\":\"\"}}),_c('span',{staticClass:\"iconfont icon-play\"},[_c('i',{staticClass:\"el-icon-video-play\"})]),_c('div',{staticClass:\"num-wrap\"},[_c('div',{staticClass:\"num\"},[_vm._v(_vm._s(item.playCount))])]),_c('span',{staticClass:\"time\"},[_vm._v(_vm._s(item.duration))])]),_c('div',{staticClass:\"info-wrap\"},[_c('div',{staticClass:\"name\"},[_vm._v(_vm._s(item.name))]),_c('div',{staticClass:\"singer\"},[_vm._v(_vm._s(item.artistName))])])])}),0),_c('el-pagination',{attrs:{\"background\":\"\",\"layout\":\"prev, pager, next\",\"total\":_vm.count,\"current-page\":_vm.MVpage},on:{\"current-change\":_vm.handleCurrentChangeMusicMV}})],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"result-container\">\r\n    <div class=\"title-wrap\">\r\n      <!-- 标题 -->\r\n      <h2 class=\"title\">{{ $route.query.q }}</h2>\r\n      <span class=\"sub-title\">找到 {{ count }} 个结果</span>\r\n    </div>\r\n    <el-tabs v-model=\"activeIndex\">\r\n      <el-tab-pane label=\"歌曲\" name=\"songs\">\r\n        <el-table :data=\"songList\" border style=\"width: 100%\">\r\n          <el-table-column\r\n            label=\"序号\"\r\n            type=\"index\"\r\n            width=\"50\"\r\n          ></el-table-column>\r\n          <el-table-column prop=\"name\" label=\"歌名\" width=\"\"> </el-table-column>\r\n          <el-table-column prop=\"artists[0].name\" label=\"歌手\" width=\"\">\r\n          </el-table-column>\r\n          <el-table-column prop=\"album.name\" label=\"专辑\" width=\"180\">\r\n          </el-table-column>\r\n          <el-table-column prop=\"duration\" label=\"时长\" width=\"120\">\r\n          </el-table-column>\r\n          <el-table-column prop=\"\" label=\"功能\">\r\n            <template slot-scope=\"scope\">\r\n              <i\r\n                v-if=\"isPay != scope.row.id\"\r\n                class=\"el-icon-video-play\"\r\n                style=\"font-size: 22px\"\r\n                @click=\"playMusic(scope.row.id, scope.row.name)\"\r\n              ></i>\r\n\r\n              <i\r\n                v-else\r\n                class=\"el-icon-video-pause\"\r\n                style=\"font-size: 22px\"\r\n                @click=\"audioPause()\"\r\n              ></i>\r\n\r\n              <i\r\n                class=\"el-icon-star-off\"\r\n                style=\"font-size: 22px\"\r\n                @click=\"LikeMusic(scope.row.id)\"\r\n              ></i>\r\n              <i\r\n                class=\"el-icon-circle-plus-outline\"\r\n                style=\"font-size: 22px\"\r\n                @click=\"MoreMusic(scope.row.id)\"\r\n              ></i>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n        <el-pagination\r\n          @current-change=\"handleCurrentChangeMusic\"\r\n          background\r\n          layout=\"prev, pager, next\"\r\n          :total=\"count\"\r\n          :current-page=\"page\"\r\n        >\r\n        </el-pagination>\r\n      </el-tab-pane>\r\n\r\n      <el-tab-pane label=\"歌单\" name=\"lists\">\r\n        <div class=\"items\">\r\n          <div\r\n            v-for=\"(item, index) in playlists\"\r\n            :key=\"index\"\r\n            class=\"item\"\r\n            @click=\"gotoMusicPlaylist(item.id)\"\r\n          >\r\n            <div class=\"img-wrap\">\r\n              <div class=\"num-wrap\">\r\n                播放量:\r\n                <span class=\"num\">{{ item.playCount }}</span>\r\n              </div>\r\n              <img :src=\"item.coverImgUrl\" :onerror=\"errorImage\"  alt=\"\" />\r\n              <span class=\"iconfont icon-play\">\r\n                <i class=\"el-icon-video-play\"></i\r\n              ></span>\r\n            </div>\r\n            <p class=\"name\">{{ item.name }}</p>\r\n          </div>\r\n        </div>\r\n        <el-pagination\r\n          @current-change=\"handleCurrentChangeMusicList\"\r\n          background\r\n          layout=\"prev, pager, next\"\r\n          :total=\"count\"\r\n          :current-page=\"MusicListpage\"\r\n        >\r\n        </el-pagination>\r\n      </el-tab-pane>\r\n      <el-tab-pane label=\"MV\" name=\"mv\">\r\n        <div class=\"items mv\">\r\n          <div\r\n            v-for=\"(item, index) in mv\"\r\n            :key=\"index\"\r\n            class=\"item\"\r\n            @click=\"gotoMusicMv(item.id)\"\r\n          >\r\n            <div class=\"img-wrap\">\r\n              <!-- 封面 -->\r\n              <img :src=\"item.cover\" alt=\"\" />\r\n              <span class=\"iconfont icon-play\"\r\n                ><i class=\"el-icon-video-play\"></i\r\n              ></span>\r\n\r\n              <div class=\"num-wrap\">\r\n                <!-- <div class=\"iconfont icon-play\">\r\n                  <i class=\"el-icon-video-play\"></i>\r\n                </div> -->\r\n                <!-- 播放次数 -->\r\n                <div class=\"num\">{{ item.playCount }}</div>\r\n              </div>\r\n\r\n              <!-- 持续时间 -->\r\n              <span class=\"time\">{{ item.duration }}</span>\r\n            </div>\r\n            <div class=\"info-wrap\">\r\n              <!-- mv名 -->\r\n              <div class=\"name\">{{ item.name }}</div>\r\n              <!-- 歌手名 -->\r\n              <div class=\"singer\">{{ item.artistName }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <el-pagination\r\n          @current-change=\"handleCurrentChangeMusicMV\"\r\n          background\r\n          layout=\"prev, pager, next\"\r\n          :total=\"count\"\r\n          :current-page=\"MVpage\"\r\n        >\r\n        </el-pagination>\r\n      </el-tab-pane>\r\n    </el-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      //错误图片\r\n       errorImage: 'this.src=\"' + require('../assets/404.jpg') + '\"'  ,\r\n      // tab切换时 会改变的数据\r\n      activeIndex: \"songs\",\r\n      // 保存 查询歌曲\r\n      songList: [],\r\n      // 保存歌单的字段\r\n      playlists: [],\r\n      // 保存mv的字段\r\n      mv: [],\r\n      // 搜索结果的总数\r\n      count: 0,\r\n      //判断播放按钮\r\n      isPay: true,\r\n      //页数\r\n      page: 1,\r\n      //返回的数据量\r\n      limit: 10,\r\n\r\n      MusicListpage: 1,\r\n      //返回的数据量\r\n      MusicListlimit: 10,\r\n\r\n      MVpage: 1,\r\n      //返回的数据量\r\n      MVlimit: 8,\r\n    };\r\n  },\r\n  // 生命周期钩子 回调函数\r\n  created() {\r\n    this.getSearchMusicdata();\r\n  },\r\n  //页面监听事件判断 三个可切换的 页面  歌曲 歌单 mv\r\n  //这样写很麻烦，同意的是请求三次地址 不如给三个单击的方法去判断\r\n  //为了展示项目的多样性，用了监听器\r\n  watch: {\r\n    async activeIndex() {\r\n      let type = 1;\r\n      // 获取个数\r\n      let limit = 10;\r\n      // 根据样式的name 监听事件\r\n      switch (this.activeIndex) {\r\n        case \"songs\":\r\n          type = 1;\r\n          limit = 10;\r\n          break;\r\n        case \"lists\":\r\n          type = 1000;\r\n          limit = 10;\r\n          break;\r\n        case \"mv\":\r\n          type = 1004;\r\n          limit = 8;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      const { data: res } = await this.$http.get(\"search\", {\r\n        params: {\r\n          keywords: this.$route.query.q,\r\n          type, // type:type,\r\n          // 获取的数据量\r\n          limit, // limit: limit}}\r\n          // offset: (this.page-1) * this.limit\r\n        },\r\n      });\r\n      if (res.code != 200) {\r\n        return this.$message.error(\"error:请检查网络 \");\r\n      } else if (res.msg != null) {\r\n        return this.$message.error(\"error:该歌手已经被屏蔽！请理智听歌\");\r\n      } else {\r\n        if (type == 1) {\r\n          // 歌曲\r\n          this.songList = res.result.songs;\r\n          // 计算歌曲时间\r\n          for (let i = 0; i < this.songList.length; i++) {\r\n            let min = parseInt(this.songList[i].duration / 1000 / 60);\r\n            let sec = parseInt((this.songList[i].duration / 1000) % 60);\r\n            if (min < 10) {\r\n              min = \"0\" + min;\r\n            }\r\n            if (sec < 10) {\r\n              sec = \"0\" + sec;\r\n            }\r\n            // console.log(min + '|' + sec)\r\n            this.songList[i].duration = min + \":\" + sec;\r\n          }\r\n          // 保存总数\r\n          this.count = res.result.songCount;\r\n        }\r\n        // 获取 歌单\r\n        else if (type == 1000) {\r\n          // 歌单的逻辑\r\n          this.playlists = res.result.playlists;\r\n          // 总数\r\n          this.count = res.result.playlistCount;\r\n\r\n          // 处理 播放次数\r\n          for (let i = 0; i < this.playlists.length; i++) {\r\n            if (this.playlists[i].playCount > 100000) {\r\n              this.playlists[i].playCount =\r\n                parseInt(this.playlists[i].playCount / 10000) + \"万\";\r\n            }\r\n          }\r\n        } else {\r\n          // 保存mv数据\r\n          this.mv = res.result.mvs;\r\n          // 总数\r\n          this.count = res.result.mvCount;\r\n\r\n          // 处理数据\r\n          for (let i = 0; i < this.mv.length; i++) {\r\n            // 时间\r\n            let min = parseInt(this.mv[i].duration / 1000 / 60);\r\n            let sec = parseInt((this.mv[i].duration / 1000) % 60);\r\n            if (min < 10) {\r\n              min = \"0\" + min;\r\n            }\r\n            if (sec < 10) {\r\n              sec = \"0\" + sec;\r\n            }\r\n            this.mv[i].duration = min + \":\" + sec;\r\n\r\n            // 播放次数\r\n            if (this.mv[i].playCount > 100000) {\r\n              this.mv[i].playCount =\r\n                parseInt(this.mv[i].playCount / 10000) + \"万\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    async handleCurrentChangeMusic(val) {\r\n      // 保存页面 重新获取数据\r\n      this.page = val;\r\n      this.getSearchMusicdata();\r\n    },\r\n    async handleCurrentChangeMusicList(val) {\r\n      // 保存页面 重新获取数据\r\n      this.MusicListpage = val;\r\n      this.getSearchMusicListdata();\r\n    },\r\n    async handleCurrentChangeMusicMV(val) {\r\n      // 保存页面 重新获取数据\r\n      this.MVpage = val;\r\n      this.getSearchMusicMVdata();\r\n    },\r\n\r\n    // 去mv详情页\r\n    async gotoMusicMv(id) {\r\n      await this.$router.push(`/PlayMusicMV?q=${id}`);\r\n    },\r\n    // 去歌单详情页\r\n    async gotoMusicPlaylist(id) {\r\n      // 跳转并携带数据即可\r\n      await this.$router.push(`/PlayMusicList?q=${id}`);\r\n    },\r\n\r\n    async getSearchMusicdata() {\r\n      const { data: res } = await this.$http.get(\"search\", {\r\n        params: {\r\n          keywords: this.$route.query.q,\r\n          type: 1,\r\n          // 获取的数据量\r\n          limit: 10,\r\n          offset: (this.page - 1) * this.limit,\r\n        },\r\n      });\r\n      if (res.code != 200) {\r\n        return this.$message.error(\"error:请检查网络 \");\r\n      } else if (res.msg != null) {\r\n        return this.$message.error(\"error:该歌手被屏蔽！请理智听歌\");\r\n      } else {\r\n        this.songList = res.result.songs;\r\n        //这里没必要自己算，引入moment函数就好了，只是提供一种写法\r\n        // 计算歌曲时间\r\n        for (let i = 0; i < this.songList.length; i++) {\r\n          let min = parseInt(this.songList[i].duration / 1000 / 60);\r\n          let sec = parseInt((this.songList[i].duration / 1000) % 60);\r\n          if (min < 10) {\r\n            min = \"0\" + min;\r\n          }\r\n          if (sec < 10) {\r\n            sec = \"0\" + sec;\r\n          }\r\n          this.songList[i].duration = min + \":\" + sec;\r\n        }\r\n        // 保存总数\r\n        this.count = res.result.songCount;\r\n      }\r\n    },\r\n\r\n    async getSearchMusicListdata() {\r\n      const { data: res } = await this.$http.get(\"/search\", {\r\n        params: {\r\n          keywords: this.$route.query.q,\r\n          type: 1000,\r\n          // 获取的数据量\r\n          limit: this.MusicListlimit,\r\n          offset: (this.MusicListpage - 1) * this.MusicListlimit,\r\n        },\r\n      });\r\n      if (res.code != 200) {\r\n        return this.$message.error(\"error:请检查网络 \");\r\n      } else {\r\n        // 歌单的逻辑\r\n        this.playlists = res.result.playlists;\r\n\r\n        // 处理 播放次数\r\n        for (let i = 0; i < this.playlists.length; i++) {\r\n          if (this.playlists[i].playCount > 100000) {\r\n            this.playlists[i].playCount =\r\n              parseInt(this.playlists[i].playCount / 10000) + \"万\";\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    async getSearchMusicMVdata() {\r\n      const { data: res } = await this.$http.get(\"search\", {\r\n        params: {\r\n          keywords: this.$route.query.q,\r\n          type: 1004,\r\n          // 获取的数据量\r\n          limit: 8,\r\n          offset: (this.MVpage - 1) * this.MVlimit,\r\n        },\r\n      });\r\n      if (res.code != 200) {\r\n        return this.$message.error(\"error:请检查网络 \");\r\n      } else {\r\n        // 保存mv数据\r\n        this.mv = res.result.mvs;\r\n        // 总数\r\n        this.count = res.result.mvCount;\r\n\r\n        // 处理数据\r\n        for (let i = 0; i < this.mv.length; i++) {\r\n          // 时间\r\n          let min = parseInt(this.mv[i].duration / 1000 / 60);\r\n          let sec = parseInt((this.mv[i].duration / 1000) % 60);\r\n          if (min < 10) {\r\n            min = \"0\" + min;\r\n          }\r\n          if (sec < 10) {\r\n            sec = \"0\" + sec;\r\n          }\r\n          this.mv[i].duration = min + \":\" + sec;\r\n\r\n          // 播放次数\r\n          if (this.mv[i].playCount > 100000) {\r\n            this.mv[i].playCount =\r\n              parseInt(this.mv[i].playCount / 10000) + \"万\";\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    async playMusic(id, name = null) {\r\n      this.isPay = id;\r\n      const { data: res } = await this.$http.get(\"/song/url?id=\" + id);\r\n      if (res.code !== 200) {\r\n        return this.$message.error(\r\n          \"error:获取歌曲地址失败，请检查版权...或者网络 \"\r\n        );\r\n      } else {\r\n        let url = res.data[0].url;\r\n        // 设置给父组件的 播放地址\r\n        // this.$parent.musicUrl = url;\r\n        this.$parent.audioSrc(url);\r\n        this.$parent.audioSong(name);\r\n        this.$parent.audioPlay();\r\n        // this.nowplay = res.data[0].id;\r\n      }\r\n    },\r\n    //暂停播放\r\n    async audioPause() {\r\n      this.isPay = null;\r\n      await this.$parent.audioPause();\r\n    },\r\n    LikeMusic() {\r\n      return this.$message.warning(\"warning:该功能待更新，仅提供音乐试听\");\r\n    },\r\n    MoreMusic() {\r\n      return this.$message.warning(\"warning:该功能待更新，仅提供音乐试听\");\r\n    },\r\n  },\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./searchMusic.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./searchMusic.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./searchMusic.vue?vue&type=template&id=745d9516&\"\nimport script from \"./searchMusic.vue?vue&type=script&lang=js&\"\nexport * from \"./searchMusic.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_s","$route","query","q","count","model","value","callback","$$v","activeIndex","expression","attrs","staticStyle","songList","scopedSlots","_u","key","fn","scope","isPay","row","id","on","$event","playMusic","name","audioPause","LikeMusic","MoreMusic","page","handleCurrentChangeMusic","_l","item","index","gotoMusicPlaylist","playCount","coverImgUrl","errorImage","MusicListpage","handleCurrentChangeMusicList","gotoMusicMv","cover","duration","artistName","MVpage","handleCurrentChangeMusicMV","staticRenderFns","data","playlists","mv","limit","MusicListlimit","MVlimit","created","getSearchMusicdata","watch","type","params","keywords","res","min","parseInt","sec","methods","val","offset","url","$message","warning","component"],"sourceRoot":""}